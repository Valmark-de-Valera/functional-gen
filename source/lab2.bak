(define (fact m)
(
 if (= m 0)
    1
    (* m (fact (- m 1)))))

(define iter 0)
(define (ssin x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 0)(< x 1)) 
     (-
                  (- (/ (expt x (car m)) (fact (car m))) (ssin x (+ 2 (car m))))
                  (- (/ (expt (/ x 2)  (fact (car m))) (car m)) (ssin (/ x 2) (+ 2 (car m))))
                  ))
    ((or (> x -2)(= x -2)(< x 0)(= x 0))
     (-
                  (- (/ (expt (expt x 3) (car m)) (fact (car m))) (ssin (expt x 3) (+ 2 (car m))))
                  (- (/ (expt (+ x 0.125) (car m)) (fact (car m))) (ssin (+ x 0.125) (+ 2 (car m))))
                 ))
    )    
    )


(define (ssin2 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (- (sin x) (sin (/ x 2))))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (- (sin (expt x 3)) (sin (+ x 0.125))))
    ))    
    
(define (ssin3 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (sin x))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (sin x))
    ))
(define (ssin4 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (- (/ (expt x (car m)) (fact (car m))) (ssin x (+ 2 (car m)))))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (- (/ (expt x (car m)) (fact (car m))) (ssin x (+ 2 (car m)))))
    )) 
(define (ssin5 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (sin (/ x 2)))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (sin (/ x 2)))
    ))
(define (ssin6 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (- (/ (expt (/ x 2)  (fact (car m))) (car m)) (ssin (/ x 2) (+ 2 (car m)))))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (- (/ (expt (/ x 2)  (fact (car m))) (car m)) (ssin (/ x 2) (+ 2 (car m)))))
    ))
(define (ssin7 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (sin (expt x 3)))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (sin (expt x 3)))
    ))
(define (ssin8 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (- (/ (expt (expt x 3) (car m)) (fact (car m))) (ssin (expt x 3) (+ 2 (car m)))))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (- (/ (expt (expt x 3) (car m)) (fact (car m))) (ssin (expt x 3) (+ 2 (car m)))))
    ))
(define (ssin9 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (- (sin x) (sin (/ x 2))))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (- (sin (expt x 3)) (sin (+ x 0.125))))
    ))
(define (ssin10 x . m)
  (set! iter (+ iter 1))
(cond
  ((< 25 (car m)) 0)
    ((or (> x 1)(= x 1)) (-
                  (- (/ (expt x (car m)) (fact (car m))) (ssin x (+ 2 (car m))))
                  (- (/ (expt (/ x 2)  (fact (car m))) (car m)) (ssin (/ x 2) (+ 2 (car m))))
                  ))
    ((or (> x -2)(= x -2)(< x 0)(= x 0)) (-
                  (- (/ (expt (expt x 3) (car m)) (fact (car m))) (ssin (expt x 3) (+ 2 (car m))))
                  (- (/ (expt (+ x 0.125) (car m)) (fact (car m))) (ssin (+ x 0.125) (+ 2 (car m))))
                 ))
    ))
(display "Task 1 ")
(display "Please enter x: ")
(define x (read))
(newline)

(define m 1)

(define r1 (ssin x m))
(define r2 (ssin2 x m))
(define r3 (ssin3 x m))
(define r4 (ssin4 x m))
(define r5 (ssin5 x m))
(define r6 (ssin6 x m))
(define r7 (ssin7 x m))
(define r8 (ssin8 x m))
(define r9 (ssin9 x m))
(define r10 (ssin10 x m))


(display "sin= ")(display r2)
(newline)
(display "Result:")(display r1)
(newline)
(display "sin3= ")(display r3)
(newline)
(display "res sin4= ")(display r4)
(newline)
(display "sin5= ")(display r5)
(newline)
(display "res sin6= ")(display r6)
(newline)
(display "sin7= ")(display r7)
(newline)
(display "res sin8= ")(display r8)
(newline)
(display "sin9= ")(display r9)
(newline)
(display "res sin10= ")(display r10)
(newline)